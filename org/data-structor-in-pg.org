:PROPERTIES:
:ID:       474928b9-c784-4310-84e0-3b20c90697aa
:END:
#+TITLE: Data Structures in PG
#+AUTHOR: Yang,Ying-chao
#+EMAIL:  yang.yingchao@qq.com
#+OPTIONS:  ^:nil _:nil H:7 num:t toc:2 \n:nil ::t |:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc
#+STARTUP:  align nodlcheck oddeven lognotestate
#+SEQ_TODO: TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:     noexport(n)
#+LANGUAGE: en
#+EXCLUDE_TAGS: noexport
#+FILETAGS: :tag1:tag2:

* Hash & TapeSet
:PROPERTIES:
:CUSTOM_ID: h:cc825ae9-05f0-4ce8-a53c-a0697f0c1d99
:END:
#+BEGIN_SRC plantuml :file images/name-gen-486fe37b102c78f1129a90683f3f0ccc.png :java -Djava.awt.headless=true  :cmdline -charset UTF-8

  class LogicalTapeSet {
      + BufFile pfile
      + SharedFileSet fileset
      + int worker
      + long nBlocksAllocated
      + long nBlocksWritten
      + long nHoleBlocks
      + bool forgetFreeSpace
      + long freeBlocks
      + long nFreeBlocks
      + Size freeBlocksLen
      + bool enable_prealloc
  }

  class LogicalTape {
      + LogicalTapeSet tapeSet
      + bool writing
      + bool frozen
      + bool dirty
      + long firstBlockNumber
      + long curBlockNumber
      + long nextBlockNumber
      + long offsetBlockNumber
      + char buffer
      + int buffer_size
      + int max_size
      + int pos
      + int nbytes
      + long prealloc
      + int nprealloc
      + int prealloc_size
  }



  class BufFile {
      + int numFiles
      + File files
      + bool isInterXact
      + bool dirty
      + bool readOnly
      + FileSet fileset
      + const name
      + ResourceOwner resowner
      + int curFile
      + off_t curOffset
      + int pos
      + int nbytes
      + PGAlignedBlock buffer
  }

  LogicalTapeSet *-- BufFile

  class HashAggSpill {
  + int npartitions
  + LogicalTape partitions
  + int64 ntuples
  + uint32 mask
  + int shift
  + hyperLogLogState hll_card
  }


  HashAggSpill *-- LogicalTape

  LogicalTape - LogicalTapeSet
#+END_SRC
#+CAPTION: data structors
#+NAME: fig:data_structors
#+RESULTS:
[[file:images/name-gen-486fe37b102c78f1129a90683f3f0ccc.png]]

* Slot & tuple
:PROPERTIES:
:CUSTOM_ID: h:c2c5a9a7-a0ef-4fd8-b7ec-46ada6e71726
:END:

#+BEGIN_SRC plantuml :file images/name-gen-6e03751e14c67cd9a6dd7037d735ef65.png :java -Djava.awt.headless=true  :cmdline -charset UTF-8

  class TupleTableSlot {
    + NodeTag type
    + int tts_flags
    + AttrNumber tts_nvalid
    + const tts_ops
    + TupleDesc tts_tupleDescriptor
    + int tts_values
    + int tts_isnull
    + int tts_mcxt
    + ItemPointerData tts_tid
    + int tts_tableOid
  }




  class MinimalTupleData {
    + int t_len
    + char mt_padding
    + int t_infomask2
    + int t_infomask
    + int t_hoff
    + int t_bits
  }


  class HeapTupleHeaderData {
    + union t_choice
    + ItemPointerData t_ctid
    + int t_infomask2
    + int t_infomask
    + int t_hoff
    + int t_bits
  }

  class union {
    + HeapTupleFields t_heap
    + DatumTupleFields t_datum
  }


  HeapTupleHeaderData *-- union

  class MinimalTupleTableSlot {
    + TupleTableSlot base
    + HeapTuple tuple
    + MinimalTuple mintuple
    + HeapTupleData minhdr
    + int off
  }

  class HeapTupleData {
    + int t_len
    + ItemPointerData t_self
    + int t_tableOid
    + HeapTupleHeader t_data
  }


  class VirtualTupleTableSlot {
    + TupleTableSlot base
    + char data
  }

  class HeapTupleTableSlot {
    + TupleTableSlot base
    + HeapTuple tuple
    + int off
    + HeapTupleData tupdata
  }

  class BufferHeapTupleTableSlot {
    + HeapTupleTableSlot base
    + Buffer buffer
  }


  TupleTableSlot <|-- MinimalTupleTableSlot
  TupleTableSlot <|-- VirtualTupleTableSlot
  TupleTableSlot <|-- HeapTupleTableSlot
  HeapTupleTableSlot <|-- BufferHeapTupleTableSlot


  MinimalTupleTableSlot *-- MinimalTupleData
  HeapTupleTableSlot *-- HeapTupleData
  HeapTupleData *-- HeapTupleHeaderData

#+END_SRC
#+CAPTION: slots
#+NAME: fig:slots
#+RESULTS:
[[file:images/name-gen-6e03751e14c67cd9a6dd7037d735ef65.png]]
