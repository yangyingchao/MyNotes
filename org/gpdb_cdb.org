:PROPERTIES:
:ID:       d7837d22-40e0-4504-9391-354c3a43eb79
:END:
#+TITLE: gpdb cdb
#+AUTHOR: Yang,Ying-chao
#+EMAIL:  yang.yingchao@qq.com
#+OPTIONS:  ^:nil _:nil H:7 num:t toc:2 \n:nil ::t |:t -:t f:t *:t tex:t d:(HIDE) tags:not-in-toc author:nil
#+STARTUP:  align nodlcheck oddeven lognotestate
#+SEQ_TODO: TODO(t) INPROGRESS(i) WAITING(w@) | DONE(d) CANCELED(c@)
#+TAGS:     noexport(n)
#+LANGUAGE: en
#+EXCLUDE_TAGS: noexport

* Data structures
:PROPERTIES:
:CUSTOM_ID: h:3a9ecefa-c67a-4512-a5d4-69adb4c9a0d6
:END:

** Slice Table
:PROPERTIES:
:CUSTOM_ID: h:1223137a-c35a-4cca-8922-447664c4cc0b
:END:

#+BEGIN_SRC plantuml :file images/SliceTable-gen-e3de35057480a3f67a59b81aff9b1a55.png :java -Djava.awt.headless=true  :cmdline -charset UTF-8
  @startuml
  class SliceTable {
  + NodeTag type
  + int localSlice
  + int numSlices
  + ExecSlice slices
  + bool hasMotions
  + int instrument_options
  + uint32 ic_instance_id
  }

  note right of SliceTable::localSlice
  Index of the slice to execute
  end note

  note right of SliceTable::slices
  Array of slices, indexed by SliceIndex
  end note


  note right of SliceTable::hasMotions
  Are there any Motion nodes anywhere in the plan?
  end note


  class ExecSlice {
  + int sliceIndex
  + int rootIndex
  + int parentIndex
  + int planNumSegments
  + List children
  + GangType gangType
  + List segments
  + struct primaryGang
  + List primaryProcesses
  + Bitmapset processesMap
  }

  note right of ExecSlice::primaryProcesses
  A list of CDBProcess nodes corresponding to the worker
  processes allocated to implement this plan slice.
  end note

  note right of ExecSlice::processesMap
  A bitmap to identify which QE should execute this slice
  end note

  SliceTable o-- ExecSlice

  class Gang {
  + GangType type
  + int size
  + struct db_descriptors
  + bool allocated
  }

  note right of Gang::db_descriptors
  Array of QEs/segDBs that make up this gang.
  Sorted by segment index.
  end note


  ExecSlice *-- Gang

  class CdbProcess {
  + NodeTag type
  + char listenerAddr
  + int listenerPort
  + int pid
  + int contentid
  + int dbid
  }

  ExecSlice o-- CdbProcess



  class SegmentDatabaseDescriptor {
  + struct segment_database_info
  + int segindex
  + int conn
  + int motionListener
  + int backendPid
  + char whoami
  + int isWriter
  + int identifier
  }

  Gang o-- SegmentDatabaseDescriptor



  class CdbComponentDatabases {
  + CdbComponentDatabaseInfo segment_db_info
  + int total_segment_dbs
  + CdbComponentDatabaseInfo entry_db_info
  + int total_entry_dbs
  + int total_segments
  + int fts_version
  + int expand_version
  + int numActiveQEs
  + int numIdleQEs
  + int qeCounter
  + List freeCounterList
  }

  note right of CdbComponentDatabaseInfo::segment_db_info
  array of  SegmentDatabaseInfo for segment databases
  end note

  note right of CdbComponentDatabaseInfo::entry_db_info
  array of  SegmentDatabaseInfo for entry databases
  end note


  class CdbComponentDatabaseInfo {
  + struct config
  + CdbComponentDatabases cdbs
  + int hostSegs
  + List freelist
  + int numIdleQEs
  + int numActiveQEs
  }

  note right of CdbComponentDatabaseInfo::cdbs
  point to owners
  end note

  CdbComponentDatabases o-- CdbComponentDatabaseInfo



  class GpSegConfigEntry {
  + int dbid
  + int segindex
  + char role
  + char preferred_role
  + char mode
  + char status
  + int port
  + char hostname
  + char address
  + char datadir
  + char hostip
  + char hostaddrs
  }

  CdbComponentDatabaseInfo o-- GpSegConfigEntry

  SegmentDatabaseDescriptor o-- CdbComponentDatabaseInfo

  @enduml
#+END_SRC
#+CAPTION: SliceTable
#+NAME: fig:SliceTable
#+RESULTS:
[[file:images/SliceTable-gen-e3de35057480a3f67a59b81aff9b1a55.png]]
2[[file:images/SliceTable-gen-e3de35057480a3f67a59b81aff9b1a55.png]]

*** SliceTable
:PROPERTIES:
:CUSTOM_ID: h:529c866c-a184-44fa-be5a-62154cd53821
:END:
=SliceTable= : 由 Slice 组成的链表， Slice 组织成三类：
- root slices: \\
  Slice 0

- motion slices \\
  =1 ~ n= 为 motion slices, 每个 slice 的根为 sending motion

- 其余为 initPlans

*** ExecSlice
:PROPERTIES:
:CUSTOM_ID: h:384cef30-3dad-4d92-9f0a-a892701e42b5
:END:

- MPP 中，计划树 (PlanTree) 被切分成多个单独的执行单元 （又称 *Slice* ）
- 一个 Slice 在进程组 （process gang） 的一个 worker 上执行


* PostgresMain
:PROPERTIES:
:CUSTOM_ID: h:9a8ad5db-0d8c-4bef-bbc8-4a27cd48ef45
:END:

** Call graph (QE):
:PROPERTIES:
:CUSTOM_ID: h:554948eb-a908-49ea-89f4-324ac2f96fe7
:END:

#+BEGIN_SRC text -r
  Main()
    PostmasterMain()
      ServerLoop()
        BackendStartup()
          BackendRun()
            PostgresMain()
              InitPostgres()
                cdb_setup()
                  ensureInterconnectAddress()
                  InitMotionLayerIPC()
                    InitMotionTCP()
                        setupTCPListeningSocket()
              sendQEDetails()
#+END_SRC

=setupTCPListeningSocket()= 会由操作系统分配端口，并返回上层。并在 =InitMotionlayerIPC()= 中存储在全局变量
=Gp_listener_port= 中，并随后在函数 =sendQEDetails(void)= 中将端口信息 "qe_listener_port"  发送给 client 。



** QD
:PROPERTIES:
:CUSTOM_ID: h:e1a256d3-301b-4ba1-be57-8749befb730f
:END:

#+BEGIN_SRC text -r
  standard_ExecutorStart()
    CdbDispatchPlan()
      cdbdisp_dispatchX()
        AssignGangs()
          AssignWriterGangFirst()
            AllocateGang()
              cdbgang_createGang()
                cdbgang_createGang_async()
                  cdbconn_doConnectComplete()
                    cdbconn_get_motion_listener_port()
            setupCdbProcessList()
#+END_SRC


函数  [[file:~/Work/gpdb/src/backend/executor/execUtils.c::AssignGangs(CdbDispatcherState *ds, QueryDesc *queryDesc)][AssignGangs()]]  在 QD 上执行， 将 Executor 工厂分配的 gangs 分配给 slice table 中的 slices.
从而构建全局的 slice table 。该过程分成了两步：

+ [[file:~/Work/gpdb/src/backend/executor/execUtils.c::AssignWriterGangFirst][AssignWriterGangFirst()]]

  + [[file:~/Work/gpdb/src/backend/executor/execUtils.c::AllocateGang][AllocateGang()]]

    登录到涉及到的 segDB ， 生成会话 （进程）， 从而创建进程组。

    - [[file:~/Work/gpdb/src/backend/cdb/dispatcher/cdbgang_async.c::cdbgang_createGang_async(List *segments, SegmentType segmentType)][cdbgang_createGang_async()]]

      * [[file:~/Work/gpdb/src/backend/cdb/dispatcher/cdbgang.c::buildGangDefinition(List *segments, SegmentType segmentType)][buildGangDefinition()]] \\
        读取 GP 系统表， 构建 =CdbComponentDatabases= ，随后将该结构转换成为 =Gang= 结构， 并初始化其中与 connection 无
        关的成员。随后对其中每个 seg 发起连接。

      * [[file:~/Work/gpdb/src/backend/cdb/dispatcher/cdbgang_async.c::cdbconn_doConnectStart(segdbDesc, gpqeid, options, diff_options);][cdbconn_doConnectStart()]] \\
        填充 keywords 之后，使用 =PQconnectStartParams()= 发起连接。

      * [[file:~/Work/gpdb/src/backend/cdb/dispatcher/cdbgang_async.c::cdbconn_doConnectComplete(segdbDesc);][cdbconn_doConnectComplete()]] \\
        完成连接

        * [[file:~/Work/gpdb/src/backend/cdb/dispatcher/cdbconn.c::cdbconn_get_motion_listener_port][cdbconn_get_motion_listener_port()]] \\
          与 QE 建立连接后，读取 "qe_listener_port"

  + [[file:~/Work/gpdb/src/backend/executor/execUtils.c::setupCdbProcessList(slice);][setupCdbProcessList()]] \\
    Create a list of CdbProcess and initialize with Gang information.

+ [[file:~/Work/gpdb/src/backend/executor/execUtils.c::InventorySliceTree(ds, sliceTable, rootIdx);][InventorySliceTree()]] \\
  Helper for AssignGangs takes a simple inventory of the gangs required by a slice tree.


* Receiver
:PROPERTIES:
:CUSTOM_ID: h:c37bea35-e940-428c-befb-d19fa51a1295
:END:


* Sender
:PROPERTIES:
:CUSTOM_ID: h:d1532cbd-394f-42b8-9331-0704d91794b7
:END:
